#include <PS2X_lib.h>

#define PS2_DAT 12
#define PS2_CMD 11
#define PS2_SEL 10
#define PS2_CLK 9

// 机械臂参数
#define NUM_JOINTS 7
#define GRIPPER_MIN 0      // 修改最小值
#define GRIPPER_MAX 1000   // 修改最大值
#define DEAD_ZONE 70       // 增加死区值，降低灵敏度
#define MAX_SPEED 2       // 从10降低到2，使移动更精细
#define ACCELERATION 5     // 加速度(μs/cycle²)
#define BRAKE_DELAY 200    // 停止延迟(ms)

// 修改按钮速度为整数值，避免浮点数问题
#define BUTTON_SPEED 1     // 按钮控制时的速度增量

PS2X ps2x;
bool isConnected = false;

// 消抖时间
const unsigned long DEBOUNCE_DELAY = 50;

// 上一次按钮状态
static unsigned long lastDebounceTime = 0;
static unsigned int lastButtonState = 0;

// 定义复位按钮
#define RESET_BUTTON PSB_START

struct Joint {
  int currentPos = 500;    // 修改默认中间位置
  int targetSpeed = 0;     // 当前目标速度
  int actualSpeed = 0;     // 实际速度（带加速）
  unsigned long lastUpdate = 0;
} joints[NUM_JOINTS];

int gripperPos = 500;      // 修改夹爪默认中间位置

void debug(String message) {
  Serial.print("[$SYS] ");
  Serial.println(message);
}

void sendCommand(String type, int id, int value) {
    if (isConnected) {
        // 去掉开头的$和结尾的*，因为parseCommand不需要这些
        String cmd = type + String(id) + ":" + String(value);
        Serial.println(cmd);
    }
}

// 带加速的速度更新函数
// 去除加速度的速度更新函数
void updateJoint(int id) {
    // 仅在手柄连接时更新关节
    if (isConnected) {
        Joint &j = joints[id];
        // 直接将实际速度设置为目标速度
        j.actualSpeed = j.targetSpeed;
        // 更新位置
        j.currentPos = constrain(j.currentPos + j.actualSpeed, 
                                GRIPPER_MIN, GRIPPER_MAX);
        sendCommand("J", id, j.currentPos);
    }
}

void handleGripper() {
    static int lastGrip = 500;  // 初始值500
    static bool isMoving = false;
    if (isConnected) {
        // 右边的扳机控制夹爪
        if(ps2x.Button(PSB_R2)) {
            gripperPos = constrain(gripperPos - BUTTON_SPEED, GRIPPER_MIN, GRIPPER_MAX);
            isMoving = true;
        }
        if(ps2x.Button(PSB_R1)) {
            gripperPos = constrain(gripperPos + BUTTON_SPEED, GRIPPER_MIN, GRIPPER_MAX);
            isMoving = true;
        }
        // 恢复使用G类型命令
        if(gripperPos != lastGrip || isMoving) {
            sendCommand("G", 0, gripperPos);
            lastGrip = gripperPos;
            isMoving = false;
        }
    }
}
#undef RESET_BUTTON
// 重新定义复位按钮为X号按钮
#define RESET_BUTTON PSB_CROSS

// 一键复位功能
void resetAll() {
    if (isConnected) {
        // 只发送"R"作为复位命令
        Serial.println("R");
        
        // 更新本地状态
        for (int i = 0; i < NUM_JOINTS; i++) {
            joints[i].currentPos = 500;
            joints[i].targetSpeed = 0;
            joints[i].actualSpeed = 0;
        }
        gripperPos = 500;
    }
}

void handleJointControl() {
    unsigned long currentTime = millis();
    if (currentTime - lastDebounceTime > DEBOUNCE_DELAY) {
        lastDebounceTime = currentTime;
        
        if (ps2x.Button(RESET_BUTTON)) {
            resetAll();
        }

        // 左摇杆控制1、2舵机
        int lx = ps2x.Analog(PSS_LX);
        int ly = ps2x.Analog(PSS_LY);
        
        // 左摇杆横轴控制1舵机
        if(abs(lx - 128) > DEAD_ZONE) {
            joints[0].targetSpeed = map(lx, 0, 255, MAX_SPEED, -MAX_SPEED);
        } else {
            joints[0].targetSpeed = 0;
        }
        
        // 左摇杆纵轴控制2舵机
        if(abs(ly - 128) > DEAD_ZONE) {
            joints[1].targetSpeed = map(ly, 0, 255, MAX_SPEED, -MAX_SPEED);
        } else {
            joints[1].targetSpeed = 0;
        }

        // 右摇杆控制3、4舵机
        int rx = ps2x.Analog(PSS_RX);
        int ry = ps2x.Analog(PSS_RY);
        
        if(abs(rx - 128) > DEAD_ZONE) {
            joints[2].targetSpeed = map(rx, 0, 255, MAX_SPEED, -MAX_SPEED);
        } else {
            joints[2].targetSpeed = 0;
        }
        
        if(abs(ry - 128) > DEAD_ZONE) {
            joints[3].targetSpeed = map(ry, 0, 255, MAX_SPEED, -MAX_SPEED);
        } else {
            joints[3].targetSpeed = 0;
        }

        // 完全重写方向键控制5、6舵机部分
        // 使用布尔变量记录方向键状态
        bool up = ps2x.Button(PSB_PAD_UP);
        bool down = ps2x.Button(PSB_PAD_DOWN);
        bool left = ps2x.Button(PSB_PAD_LEFT);
        bool right = ps2x.Button(PSB_PAD_RIGHT);
        
        static unsigned long lastDirTime = 0;
        
        // 控制第5个舵机 (上下方向)
        if(up) {
            joints[4].targetSpeed = BUTTON_SPEED;
            lastDirTime = millis();
            //Serial.println("UP pressed"); // 调试输出
        } 
        else if(down) {
            joints[4].targetSpeed = -BUTTON_SPEED;
            lastDirTime = millis();
            //Serial.println("DOWN pressed"); // 调试输出
        }
        else if (millis() - lastDirTime > BRAKE_DELAY) {
            joints[4].targetSpeed = 0;
        }
        
        // 控制第6个舵机 (左右方向)
        if(right) {
            joints[5].targetSpeed = BUTTON_SPEED;
            lastDirTime = millis();
            //Serial.println("RIGHT pressed"); // 调试输出
        } 
        else if(left) {
            joints[5].targetSpeed = -BUTTON_SPEED;
            lastDirTime = millis();
            //Serial.println("LEFT pressed"); // 调试输出
        }
        else if (millis() - lastDirTime > BRAKE_DELAY) {
            joints[5].targetSpeed = 0;
        }

        // 左边的两个扳机控制7舵机 
        if(ps2x.Button(PSB_L2)) {
          joints[6].targetSpeed = -BUTTON_SPEED;
        } else if(ps2x.Button(PSB_L1)) {
          joints[6].targetSpeed = BUTTON_SPEED;
        } else {
          joints[6].targetSpeed = 0;
        }
    }

    // 更新所有关节
    for(int i=0; i<NUM_JOINTS; i++){
        if(joints[i].targetSpeed != 0 || joints[i].actualSpeed != 0){
            updateJoint(i);
        }
    }
}

// 修改loop函数以确保正确读取手柄输入
void loop() {
    static unsigned long lastUpdate = 0;
    // 仅在手柄连接时执行循环操作
    if (isConnected) {
        if(millis() - lastUpdate > 10) { // Hz控制频率
            lastUpdate = millis();
            // 确保首先完整读取手柄状态，不要省略任何参数
            ps2x.read_gamepad(false, 0);
            
            // 检查方向键是否工作的调试输出
            // if(ps2x.Button(PSB_PAD_UP)) Serial.println("Debug: UP detected");
            // if(ps2x.Button(PSB_PAD_DOWN)) Serial.println("Debug: DOWN detected");
            // if(ps2x.Button(PSB_PAD_LEFT)) Serial.println("Debug: LEFT detected");
            // if(ps2x.Button(PSB_PAD_RIGHT)) Serial.println("Debug: RIGHT detected");
            
            handleJointControl();
            handleGripper();
            
            // 震动反馈（仅在运动中）
            byte vibrate = 0;
            for(int i = 0; i < NUM_JOINTS; i++){
                if(joints[i].actualSpeed != 0) vibrate = 150;
            }
            ps2x.read_gamepad(false, vibrate);
        }
    }
}


void setup() {
  Serial.begin(115200);
  delay(500);
  
  int error = ps2x.config_gamepad(PS2_CLK, PS2_CMD, PS2_SEL, PS2_DAT);
  if(error == 0) {
    isConnected = true;
    // 减少串口输出，去除 debug 函数调用
    // debug("Controller Ready");
  }
}


zsy0073
为我的机械臂提供轨迹规划支持

GitHub Copilot
我来帮您为7自由度机械臂添加轨迹规划功能。首先让我分析一下现有的代码和功能，以确保我们能够正确地集成新的轨迹规划功能。

根据代码分析，我发现项目中已经有一个比较完善的轨迹规划框架，包括TrajectoryPlanner类，但还没有被完全集成到系统中。让我们来实现轨迹规划支持。

主要需要完成以下几个部分：

首先实现基本的轨迹类型：
关节空间轨迹（已有五次多项式插值实现）
笛卡尔空间直线轨迹
笛卡尔空间圆弧轨迹
添加运动约束：
关节速度限制
关节加速度限制
工作空间限制
提供易用的轨迹生成接口
让我们开始逐步实现：

TrajectoryExecutor.h+51-1
接下来让我们实现TrajectoryExecutor类：

TrajectoryExecutor.cpp+158-1
接下来让我们实现一个轨迹执行任务来管理轨迹规划和执行：

Tasks.cpp+153-0
接下来让我们把这些新添加的轨迹规划和执行功能集成到系统中。还需要修改Tasks.h来包含新的轨迹任务的声明：

Tasks.h+3-0
现在我们已经添加了完整的轨迹规划和执行支持。系统支持以下轨迹类型：

关节空间轨迹：使用五次多项式插值实现平滑的关节运动
笛卡尔空间直线轨迹：保持末端执行器姿态，实现直线运动
笛卡尔空间圆弧轨迹：通过三点定圆实现圆弧运动
Pick & Place任务：包含完整的抓取-移动-放置动作序列
您可以通过串口发送以下命令来控制机械臂的轨迹运动：

直线运动命令：
例如：LINE 0.2 0.0 0.3 0.0 0.0 0.0 3.0 表示移动到位置(0.2, 0, 0.3)，姿态为零，用时3秒

圆弧运动命令：
其中(vx,vy,vz)是圆弧的经过点

关节空间运动命令：
关节角度用度数表示

Pick & Place命令：
包含抓取位置、放置位置、抬升高度和总执行时间

轨迹执行器会自动：

进行运动学计算
检查关节限位
确保速度和加速度在限制范围内
平滑插值生成轨迹点
实时控制舵机执行运动
所有轨迹命令都是非阻塞的，您可以通过串口监视执行状态。系统会自动处理轨迹规划中的奇异点和关节限位。

这些新功能完全集成到了现有的任务系统中，与PS2控制、网络控制等功能并行工作。轨迹执行任务在Core 1上运行，不会影响实时控制性能。

需要注意的是，使用轨迹规划功能时，建议先将机械臂移动到一个已知的安全位置，这样可以确保逆运动学求解的准确性。