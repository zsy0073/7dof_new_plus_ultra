#include "LobotServoController.h"
#include <ESP32Servo.h>
#include <Wire.h>
#include <Adafruit_MLX90614.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h> // 引入软串口库
#include <HardwareSerial.h>
#include "ServoController.h"

// Serial: 用于调试输出和控制舵机驱动板，连接到电脑的USB接口
// SerialPort1 (UART1): 仅用于接收来自nano的数据
#define UART1_TX_PIN 0  // 默认GPIO0为TX
#define UART1_RX_PIN 1  // 默认GPIO1为RX

// 创建第二个串口实例
HardwareSerial SerialPort1(1);  // 使用UART1

LobotServoController controller;
Servo gripperServo;
Adafruit_MLX90614 mlx = Adafruit_MLX90614();
Adafruit_SSD1306 display(128, 64, &Wire, -1);

// softSerial: 用于与arduino nano通信
// 定义软串口，RX 引脚为 18，TX 引脚为 19
SoftwareSerial softSerial(18, 19);
// 定义学号和姓名
const char* studentID = "20250001";
const char* studentName = "ZSY";

ServoController servoCtrl(controller, gripperServo);

/**
 * @brief 解析输入字符串并执行相应的舵机控制命令
 * 
 * 该函数接收一个字符串输入，根据字符串的起始字符判断命令类型，
 * 并解析出舵机索引、目标位置等信息，然后控制相应的舵机运动。
 * 
 * @param inputString 输入的命令字符串
 */
void parseInputString(const String& inputString) {
    // 显示命令
    display.fillRect(0, 40, 128, 10, BLACK);
    display.setCursor(0, 40);
    display.print("Cmd: ");
    display.print(inputString);
    display.display();

    // 使用新的ServoController处理命令
    servoCtrl.processCommand(inputString);
}

/**
 * @brief 读取环境温度并在 OLED 屏幕上显示
 * 
 * 该函数从温度传感器读取环境温度，然后在 OLED 屏幕上显示温度值，
 * 同时显示学号和姓名。
 */
void readAndDisplayTemperature() {
    // 读取环境温度
    float ambientTemp = mlx.readAmbientTempC();

    // 在OLED上显示温度
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Ambient Temp: ");
    display.print(ambientTemp);
    display.print(" C");

    // 显示学号和姓名（如果不改变可以不重复设置）
    display.setCursor(0, 15);
    display.print("ID: ");
    display.print(studentID);
    display.setCursor(0, 25);
    display.print("Name: ");
    display.print(studentName);
}

/**
 * @brief 处理软串口输入
 * 
 * 该函数持续检查软串口是否有数据输入，当接收到以 '$' 开头、'*' 结尾的字符串时，
 * 调用 parseInputString 函数进行解析。同时，在接收到数据时点亮板载指示灯。
 * 如果没有数据输入，则在 OLED 屏幕上显示 "Cmd: none"。
 */
void handleSerialInput() {
    while (softSerial.available() > 0) {
        static String inputString = "";
        char incomingChar = softSerial.read();
        if (incomingChar == '$') {
            inputString = "";
        }
        inputString += incomingChar;
        if (incomingChar == '*') {
            // 下移命令显示区域，假设下移到40像素位置
            display.fillRect(0, 40, 128, 10, BLACK); // 清除命令显示区域
            display.setCursor(0, 40);
            display.print("Cmd: ");
            display.print(inputString);
            display.display();

            // 调用解析函数
            parseInputString(inputString);
            inputString = "";
        }

        // 点亮板载指示灯
        digitalWrite(12, HIGH);
        // 移除延迟操作
        // delay(100); // 亮灯 100 毫秒
        digitalWrite(12, LOW);
    }

    if (softSerial.available() == 0) {
        display.fillRect(0, 40, 128, 20, BLACK); // 清除命令显示区域，增加高度以容纳两行文本
        display.setCursor(0, 40);
        display.print("Cmd: none");
        // 在命令显示下方显示控制板连接状态
        display.setCursor(0, 50);
        if (servoCtrl.isControllerConnected()) {
            display.print("Controller Connected");
        } else {
            display.print("Controller Not Found");
        }
        display.display();
    }
}

/**
 * @brief 处理SerialPort1输入
 * 
 * 该函数持续检查SerialPort1是否有数据输入，当接收到以 '$' 开头、'*' 结尾的字符串时，
 * 调用 parseInputString 函数进行解析，并将命令显示在OLED屏幕上。
 * 如果没有数据输入，则在 OLED 屏幕上显示 "Cmd: none"。
 */
void handleSerialPort1Input() {
    while (SerialPort1.available() > 0) {
        static String inputString = "";
        char incomingChar = SerialPort1.read();
        if (incomingChar == '$') {
            inputString = "";
        }
        inputString += incomingChar;
        if (incomingChar == '*') {
            // 下移命令显示区域，假设下移到40像素位置
            display.fillRect(0, 40, 128, 10, BLACK); // 清除命令显示区域
            display.setCursor(0, 40);
            display.print("Cmd: ");
            display.print(inputString);
            display.display();

            // 调用解析函数
            parseInputString(inputString);
            inputString = "";
        }

        // 点亮板载指示灯
        digitalWrite(12, HIGH);
    }

    if (SerialPort1.available() == 0) {
        display.fillRect(0, 40, 128, 20, BLACK); // 清除命令显示区域，增加高度以容纳两行文本
        display.setCursor(0, 40);
        display.print("Cmd: none");
        // 在命令显示下方显示控制板连接状态
        display.setCursor(0, 50);
        if (servoCtrl.isControllerConnected()) {
            display.print("Controller Connected");
        } else {
            display.print("Controller Not Found");
        }
        display.display();
    }
}

/**
 * @brief 显示最终内容
 * 
 * 该函数调用 display.display() 方法将 OLED 屏幕上的内容显示出来。
 */
void displayFinalContent() {
    display.display();
}

/**
 * @brief 初始化设置函数
 * 
 * 该函数在程序启动时执行一次，用于初始化串口通信、舵机、温度传感器、OLED 显示屏等设备，
 * 并显示初始化动画和学号、姓名信息，最后初始化软串口和设置板载指示灯引脚。
 */
void setup() {
    // 初始化调试串口，用于控制舵机驱动板
    Serial.begin(9600);
    // 初始化与上位机通信的串口，波特率9600
    SerialPort1.begin(9600, SERIAL_8N1, UART1_RX_PIN, UART1_TX_PIN);
    // 初始化用于外部设备通信的软串口，波特率9600
    softSerial.begin(9600);

    
    gripperServo.attach(8); // 假设夹爪舵机连接到引脚8
    // 初始化温度传感器
    if (!mlx.begin()) {
        Serial.println("Error connecting to MLX90614");
        while (1);
    }

    // 初始化OLED显示屏
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("SSD1306 allocation failed");
        for (;;);
    }

    // 添加初始化动画
    for (int size = 0; size <= 64; size += 4) {
        display.clearDisplay();
        display.drawRect(0, 0, size * 2, size, WHITE);
        display.display();
        delay(100);
    }

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.print("System Ready!");
    display.display();
    delay(2000);
    display.clearDisplay();

    // 显示学号和姓名
    display.setCursor(0, 0);
    display.print("ID: ");
    display.print(studentID);
    display.setCursor(0, 10); // 假设每行间隔10个像素
    display.print("Name: ");
    display.print(studentName);
    display.display();
    delay(3000); // 显示3秒
    display.clearDisplay();

    // 设置板载指示灯引脚
    pinMode(12, OUTPUT);

    // 后续正常的设置代码
    display.setTextSize(1);
    display.setTextColor(WHITE);
}

/**
 * @brief 主循环函数
 * 
 * 该函数在 setup 函数执行完毕后循环执行，不断调用 readAndDisplayTemperature 函数读取并显示温度，
 * 调用 handleSerialInput 函数处理软串口输入，最后调用 displayFinalContent 函数显示最终内容。
 */
// 修改 loop 函数，添加 handleSerialPort1Input 函数调用
void loop() {
    readAndDisplayTemperature();
    handleSerialInput();
    handleSerialPort1Input();
    
    // 定期检查控制板状态
    static unsigned long lastCheck = 0;
    if (millis() - lastCheck > 1000) { // 每秒检查一次
        servoCtrl.isControllerConnected();
        lastCheck = millis();
    }
    
    displayFinalContent();
}

